"""
Django settings for seattlecontratunes project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

#To get Docker secrets, open the relevant text file containing the secret. All secrets are in /run/secrets



from pathlib import Path
import os
import warnings


secrets=Path("run/secrets")

def getSecret(secret):
    try:
        with open(secrets / (secret + ".txt")) as file:
            return file.read()
    except:
        return FileNotFoundError

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
print("System Parameters:")
for item in os.environ:
    print(item,os.environ[item])
#for path in secrets.rglob("*"):
#    print(path)

if "DJANGO_SECRET_KEY" in os.environ.keys():
    SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]
else:
    try:
        with open(secrets / "DJANGO_SECRET_KEY.txt",'r') as file:
            SECRET_KEY=file.read()
    except FileNotFoundError:

    
        warnings.warn("Warning: DJANGO_SECRET_KEY Undefined! Using default key of 'testing' ")
        SECRET_KEY = "testing"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG",0))

#ALLOWED_HOSTS = ['localhost',"192.168.56.1","192.168.1.36","75.172.27.188"]

ALLOWED_HOSTS= os.environ.get("DJANGO_ALLOWED_HOSTS","localhost 127.0.0.1").split(" ")

#For production, place the url in Environmental Variable "PRODUCTION_HOST"
#try:
#    ALLOWED_HOSTS.append(os.environ["PRODUCTION_HOST"])
#except KeyError:
#    pass

#For production, place the url in Environmental Variable "PRODUCTION_HOST"
try:
    ALLOWED_HOSTS.append(os.environ["RAILWAY_PUBLIC_DOMAIN"])
except KeyError:
    pass



#INTERNAL_IPS = ["localhost","127.0.0.1"]
INTERNAL_IPS= os.environ.get("INTERNAL_IPS","localhost 127.0.0.1").split(" ")

#ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'auth_override.apps.AuthOverrideConfig',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "song_directory.apps.SongDirectoryConfig",
    "user_api.apps.UserApiConfig",
    
    "rest_framework",
    
    "debug_toolbar",
    "django_extensions",
    
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
   # 'allauth.socialaccount.providers.google',
    
]

AUTHENTICATION_BACKENDS = [
    
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
    
]





MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    
    "allauth.account.middleware.AccountMiddleware",
    
]

ROOT_URLCONF = "seattlecontratunes.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "seattlecontratunes.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}
"""
DATABASES = {
   "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5431"),
    }
}
"""


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    ],
   
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10

}



# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = os.environ.get("TIME_ZONE","America/Los_Angeles")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATIC_ROOT="C:\\Users\\Nicholas\\Documents\\seattlecontratunes_static"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


#all_auth settings

ACCOUNT_EMAIL_CONFIMRATION_EXPIRE_DAYS=1 
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
CCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
CCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 86400
LOGIN_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_REDIRECT_URL ='/accounts/login/'

useEmail=True
if useEmail:
    # Email Server
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
        
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    # Bottom of the file
    
    try:
        EMAIL_HOST = getSecret("EMAIL_HOST")
    except FileNotFoundError:
        warnings.warn("EMAIL_HOST undefined. This server will be unable to verify email addresses.")

    try:
        EMAIL_HOST_USER = getSecret("EMAIL_HOST_USER")
        DEFAULT_FROM_EMAIL= getSecret("EMAIL_HOST_USER")
    except FileNotFoundError:
        warnings.warn("EMAIL_HOST_USER undefined. This server will be unable to verify email addresses.")
    try:
        EMAIL_HOST_PASSWORD = getSecret("EMAIL_HOST_PASSWORD")
    except FileNotFoundError:
        warnings.warn("EMAIL_HOST_PASSWORD undefined. This server will be unable to verify email addresses.")   
        
       
    
 
        






